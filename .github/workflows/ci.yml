name: CI Quality Gates

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  pull_request:
    branches: ["main"]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  COMPOSER_CACHE_DIR: ~/.composer/cache

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          coverage: none

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: composer-${{ hashFiles('**/composer.lock') }}-${{ runner.os }}
          restore-keys: |
            composer-

      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package.json') }}-${{ runner.os }}
          restore-keys: |
            npm-

      - name: Install Node dependencies
        run: npm install

      - name: Run ESLint
        run: npm run lint

      - name: Run Pint
        run: ./vendor/bin/pint --test

      - name: Run PHPStan
        run: ./vendor/bin/phpstan analyse --memory-limit=1G

  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php-version: ['8.3', '8.4']
        db: ['mysql', 'pgsql']
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: secret
          MYSQL_DATABASE: servicedesk
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping --silent"
      pgsql:
        image: postgres:15
        env:
          POSTGRES_DB: servicedesk
          POSTGRES_PASSWORD: secret
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -q -d servicedesk -U postgres"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, intl, pcntl, bcmath, pdo_mysql, pdo_pgsql
          coverage: none

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: composer-${{ matrix.php-version }}-${{ hashFiles('**/composer.lock') }}-${{ runner.os }}
          restore-keys: |
            composer-

      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist

      - name: Run database migrations
        env:
          DB_CONNECTION: ${{ matrix.db }}
          DB_HOST: 127.0.0.1
          DB_PORT: ${{ matrix.db == 'mysql' && '3306' || '5432' }}
          DB_DATABASE: servicedesk
          DB_USERNAME: ${{ matrix.db == 'mysql' && 'root' || 'postgres' }}
          DB_PASSWORD: secret
        run: php artisan migrate --force

      - name: Run Pest
        env:
          DB_CONNECTION: ${{ matrix.db }}
          DB_HOST: 127.0.0.1
          DB_PORT: ${{ matrix.db == 'mysql' && '3306' || '5432' }}
          DB_DATABASE: servicedesk
          DB_USERNAME: ${{ matrix.db == 'mysql' && 'root' || 'postgres' }}
          DB_PASSWORD: secret
        run: ./vendor/bin/pest --ci

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pest-${{ matrix.php-version }}-${{ matrix.db }}
          path: storage/logs

  coverage:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP with Xdebug
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          coverage: xdebug

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: composer-coverage-${{ hashFiles('**/composer.lock') }}-${{ runner.os }}
          restore-keys: |
            composer-

      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist

      - name: Generate application key
        run: php artisan key:generate

      - name: Prepare coverage directory
        run: mkdir -p coverage

      - name: Run Pest with coverage
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: ':memory:'
        run: ./vendor/bin/pest --coverage-clover=coverage/clover.xml --colors=never

      - name: Enforce quality gate
        run: php artisan ci:enforce-quality-gate --source=coverage/clover.xml --correlation=${{ github.run_id }}-coverage

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-clover
          path: coverage/clover.xml

  security:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          coverage: none

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: composer-security-${{ hashFiles('**/composer.lock') }}-${{ runner.os }}
          restore-keys: |
            composer-

      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist

      - name: Composer audit
        run: composer audit --no-interaction

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-audit-${{ hashFiles('package.json') }}-${{ runner.os }}
          restore-keys: |
            npm-

      - name: Install Node dependencies
        run: npm install

      - name: npm audit
        run: npm audit --audit-level=high --production

  container:
    runs-on: ubuntu-latest
    needs: [lint, test]
    permissions:
      contents: read
    env:
      PHP_VERSION: '8.3'
      NODE_VERSION: '20'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build dependency layer
        run: |
          docker buildx build \
            --progress plain \
            --target dependencies \
            --build-arg PHP_VERSION=${PHP_VERSION} \
            --build-arg NODE_VERSION=${NODE_VERSION} \
            --load \
            -t ticketre-deps:${GITHUB_SHA} .

      - name: Build and test stage
        run: |
          docker buildx build \
            --progress plain \
            --target tester \
            --build-arg PHP_VERSION=${PHP_VERSION} \
            --build-arg NODE_VERSION=${NODE_VERSION} \
            --load \
            -t ticketre-test:${GITHUB_SHA} .

      - name: Build runtime image
        run: |
          docker buildx build \
            --progress plain \
            --target runtime \
            --build-arg PHP_VERSION=${PHP_VERSION} \
            --build-arg NODE_VERSION=${NODE_VERSION} \
            --load \
            -t ticketre-runtime:${GITHUB_SHA} .

      - name: Summarize stage sizes
        shell: bash
        run: |
          set -euo pipefail
          to_human() { numfmt --to=iec --suffix=B "$1"; }
          deps_size=$(docker image inspect ticketre-deps:${GITHUB_SHA} --format='{{.Size}}')
          test_size=$(docker image inspect ticketre-test:${GITHUB_SHA} --format='{{.Size}}')
          runtime_size=$(docker image inspect ticketre-runtime:${GITHUB_SHA} --format='{{.Size}}')
          {
            echo "| Stage | Tag | Size |"
            echo "|-------|-----|------|"
            echo "| dependencies | ticketre-deps:${GITHUB_SHA} | $(to_human "$deps_size") |"
            echo "| tester | ticketre-test:${GITHUB_SHA} | $(to_human "$test_size") |"
            echo "| runtime | ticketre-runtime:${GITHUB_SHA} | $(to_human "$runtime_size") |"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Export runtime image artifact
        run: |
          docker save ticketre-runtime:${GITHUB_SHA} | gzip > ticketre-runtime-${GITHUB_SHA}.tar.gz

      - name: Upload runtime image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ticketre-runtime-${{ github.sha }}
          path: ticketre-runtime-${{ github.sha }}.tar.gz

  notify:
    runs-on: ubuntu-latest
    if: failure()
    needs: [lint, test, coverage, security, container]
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - name: Notify Slack on failure
        if: env.SLACK_WEBHOOK_URL != ''
        uses: slackapi/slack-github-action@v1.27.0
        with:
          payload: >-
            {"text":"CI quality gates failed for ${{ github.repository }}@${{ github.ref_name }} (run ${{ github.run_id }}). See ${{ github.run_url }} for details."}
