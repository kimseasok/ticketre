name: CI

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          coverage: none
      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist
      - name: Install Node dependencies
        run: |
          npm install
          npm run build
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
      - name: Install dependencies
        run: composer install --no-interaction --prefer-dist
      - name: Run Pint
        run: ./vendor/bin/pint --test
      - name: Run PHPStan
        run: ./vendor/bin/phpstan analyse --memory-limit=1G
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ['8.3', '8.4']
        db: ['mysql', 'pgsql']
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: servicedesk
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping --silent"
      pgsql:
        image: postgres:15
        env:
          POSTGRES_DB: servicedesk
          POSTGRES_PASSWORD: secret
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -q -d servicedesk -U postgres"
    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, intl, pcntl, bcmath, pdo_mysql, pdo_pgsql
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: composer-${{ hashFiles('**/composer.lock') }}
      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist
      - name: Run database migrations
        env:
          DB_CONNECTION: ${{ matrix.db }}
          DB_HOST: ${{ matrix.db == 'mysql' && '127.0.0.1' || '127.0.0.1' }}
          DB_PORT: ${{ matrix.db == 'mysql' && '3306' || '5432' }}
          DB_DATABASE: servicedesk
          DB_USERNAME: ${{ matrix.db == 'mysql' && 'root' || 'postgres' }}
          DB_PASSWORD: ${{ matrix.db == 'mysql' && '' || 'secret' }}
        run: php artisan migrate --force
      - name: Run Pest
        env:
          DB_CONNECTION: ${{ matrix.db }}
          DB_HOST: ${{ matrix.db == 'mysql' && '127.0.0.1' || '127.0.0.1' }}
          DB_PORT: ${{ matrix.db == 'mysql' && '3306' || '5432' }}
          DB_DATABASE: servicedesk
          DB_USERNAME: ${{ matrix.db == 'mysql' && 'root' || 'postgres' }}
          DB_PASSWORD: ${{ matrix.db == 'mysql' && '' || 'secret' }}
        run: ./vendor/bin/pest --ci
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pest-${{ matrix.php-version }}-${{ matrix.db }}
          path: storage/logs
  deploy-preview:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [build, lint, test]
    steps:
      - run: echo "Preview deployment placeholder"
      - name: Cleanup preview
        if: github.event.action == 'closed'
        run: echo "Teardown preview environment"
