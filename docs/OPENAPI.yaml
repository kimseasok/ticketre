openapi: 3.1.0
description: Ticketre Service Desk API
info:
  title: Ticketre Service Desk API
  version: "1.0.0"
servers:
  - url: https://{host}
    variables:
      host:
        default: localhost
paths:
  /api/v1/health:
    get:
      summary: Application healthcheck
      tags: [System]
      responses:
        '200':
          description: Successful health response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  db:
                    type: string
                    example: ok
                  redis:
                    type: string
                    example: skipped
        '503':
          description: Dependency failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/tickets/{ticket}/messages:
    get:
      summary: List ticket messages
      tags: [Ticket Messages]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: ticket
          in: path
          required: true
          schema:
            type: integer
        - name: visibility
          in: query
          description: Optional visibility filter (agents only).
          schema:
            type: string
            enum: [public, internal]
      responses:
        '200':
          description: Collection of messages
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create ticket message
      tags: [Ticket Messages]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: ticket
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [body, visibility]
              properties:
                body:
                  type: string
                  description: Message content.
                visibility:
                  type: string
                  enum: [public, internal]
                sent_at:
                  type: string
                  format: date-time
      responses:
        '201':
          description: Message created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Message'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/tickets/{ticket}/messages/{message}:
    get:
      summary: Retrieve a single ticket message
      tags: [Ticket Messages]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketId'
        - $ref: '#/components/parameters/MessageId'
      responses:
        '200':
          description: Message detail
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Message'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update ticket message
      tags: [Ticket Messages]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketId'
        - $ref: '#/components/parameters/MessageId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                visibility:
                  type: string
                  enum: [public, internal]
                sent_at:
                  type: string
                  format: date-time
      responses:
        '200':
          description: Updated message
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Message'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete ticket message
      tags: [Ticket Messages]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketId'
        - $ref: '#/components/parameters/MessageId'
      responses:
        '204':
          description: Message deleted
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/tickets:
    get:
      summary: List tickets
      tags: [Tickets]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      responses:
        '200':
          description: Collection of tickets
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Ticket'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create ticket
      tags: [Tickets]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [subject, status, priority]
              properties:
                subject:
                  type: string
                status:
                  type: string
                  enum: [open, pending, closed]
                priority:
                  type: string
                  enum: [low, medium, high]
                assignee_id:
                  type: integer
                  nullable: true
                contact_id:
                  type: integer
                  nullable: true
                company_id:
                  type: integer
                  nullable: true
                metadata:
                  type: object
      responses:
        '201':
          description: Ticket created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Ticket'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/tickets/{ticket}:
    get:
      summary: Retrieve ticket
      tags: [Tickets]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketId'
      responses:
        '200':
          description: Ticket detail
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Ticket'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update ticket
      tags: [Tickets]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                subject:
                  type: string
                status:
                  type: string
                  enum: [open, pending, closed]
                priority:
                  type: string
                  enum: [low, medium, high]
                assignee_id:
                  type: integer
                  nullable: true
                metadata:
                  type: object
      responses:
        '200':
          description: Ticket updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Ticket'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/tickets/{ticket}/events:
    get:
      summary: List ticket lifecycle events
      tags: [Ticket Events]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketId'
      responses:
        '200':
          description: Collection of lifecycle events
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TicketEvent'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/audit-logs:
    get:
      summary: List audit logs
      tags: [Audit Logs]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: action
          in: query
          description: Filter by audit action code.
          schema:
            type: string
        - name: auditable_type
          in: query
          description: Filter by audited model type.
          schema:
            type: string
            enum: [ticket, contact, message, kb_article, kb_category]
        - name: auditable_id
          in: query
          description: Restrict results to a specific audited record id.
          schema:
            type: integer
        - name: user_id
          in: query
          description: Filter by actor id.
          schema:
            type: integer
        - name: from
          in: query
          description: Return entries created on or after this ISO 8601 date.
          schema:
            type: string
            format: date
        - name: to
          in: query
          description: Return entries created on or before this ISO 8601 date.
          schema:
            type: string
            format: date
        - name: per_page
          in: query
          description: Results per page (default 15, max 100).
          schema:
            type: integer
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: Paginated audit log collection
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuditLog'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/roles:
    get:
      summary: List tenant roles
      tags: [Roles]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - name: search
          in: query
          description: Optional case-insensitive search across name and slug.
          schema:
            type: string
      responses:
        '200':
          description: Collection of roles
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create tenant role
      tags: [Roles]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, permissions]
              properties:
                name:
                  type: string
                slug:
                  type: string
                  nullable: true
                description:
                  type: string
                  nullable: true
                permissions:
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: Role created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Role'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/roles/{role}:
    get:
      summary: Retrieve role detail
      tags: [Roles]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/RoleId'
      responses:
        '200':
          description: Role detail
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Role'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update tenant role
      tags: [Roles]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/RoleId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                slug:
                  type: string
                  nullable: true
                description:
                  type: string
                  nullable: true
                permissions:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Role updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Role'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete tenant role
      tags: [Roles]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/RoleId'
      responses:
        '204':
          description: Role deleted
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Protected role error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/kb-categories:
    get:
      summary: List knowledge base categories
      tags: [Knowledge Base]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      responses:
        '200':
          description: Collection of categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/KbCategory'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create knowledge base category
      tags: [Knowledge Base]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [brand_id, name, slug]
              properties:
                brand_id:
                  type: integer
                name:
                  type: string
                slug:
                  type: string
                parent_id:
                  type: integer
                  nullable: true
                order:
                  type: integer
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/KbCategory'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/kb-categories/{category}:
    get:
      summary: Retrieve knowledge base category
      tags: [Knowledge Base]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/KbCategoryId'
      responses:
        '200':
          description: Category detail
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/KbCategory'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update knowledge base category
      tags: [Knowledge Base]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/KbCategoryId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                brand_id:
                  type: integer
                name:
                  type: string
                slug:
                  type: string
                parent_id:
                  type: integer
                  nullable: true
                order:
                  type: integer
      responses:
        '200':
          description: Updated category
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/KbCategory'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete knowledge base category
      tags: [Knowledge Base]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/KbCategoryId'
      responses:
        '204':
          description: Category deleted
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/kb-articles:
    get:
      summary: List knowledge base articles
      tags: [Knowledge Base]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, published, archived]
        - name: locale
          in: query
          schema:
            type: string
        - name: category_id
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Collection of articles
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/KbArticle'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create knowledge base article
      tags: [Knowledge Base]
    post:
      summary: Manually record and broadcast a lifecycle event
      tags: [Ticket Events]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [brand_id, category_id, title, slug, status, content, locale]
              properties:
                brand_id:
                  type: integer
                category_id:
                  type: integer
                title:
                  type: string
                slug:
                  type: string
                status:
                  type: string
                  enum: [draft, published, archived]
                content:
                  type: string
                locale:
                  type: string
                excerpt:
                  type: string
                  nullable: true
                metadata:
                  type: object
                  additionalProperties: true
      responses:
        '201':
          description: Article created
              required: [type]
              properties:
                type:
                  type: string
                  enum: [ticket.created, ticket.updated, ticket.assigned, ticket.merged]
                visibility:
                  type: string
                  enum: [internal, public]
                payload:
                  type: object
                  description: Additional attributes to merge into the broadcast payload.
      responses:
        '201':
          description: Lifecycle event recorded
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/KbArticle'
                    $ref: '#/components/schemas/TicketEvent'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/kb-articles/{article}:
    get:
      summary: Retrieve knowledge base article
      tags: [Knowledge Base]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/KbArticleId'
      responses:
        '200':
          description: Article detail
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/KbArticle'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update knowledge base article
      tags: [Knowledge Base]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/KbArticleId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                brand_id:
                  type: integer
                category_id:
                  type: integer
                title:
                  type: string
                slug:
                  type: string
                status:
                  type: string
                  enum: [draft, published, archived]
                content:
                  type: string
                locale:
                  type: string
                excerpt:
                  type: string
                  nullable: true
                metadata:
                  type: object
                  additionalProperties: true
      responses:
        '200':
          description: Updated article
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/KbArticle'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete knowledge base article
      tags: [Knowledge Base]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/KbArticleId'
      responses:
        '204':
          description: Article deleted
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: laravel_session
  parameters:
    TenantHeader:
      name: X-Tenant
      in: header
      required: true
      schema:
        type: string
    BrandHeader:
      name: X-Brand
      in: header
      required: false
      schema:
        type: string
    TicketId:
      name: ticket
      in: path
      required: true
      schema:
        type: integer
    MessageId:
      name: message
      in: path
      required: true
      schema:
        type: integer
    KbCategoryId:
      name: category
      in: path
      required: true
      schema:
        type: integer
    KbArticleId:
      name: article
      in: path
      required: true
      schema:
        type: integer
    RoleId:
      name: role
      in: path
      required: true
      schema:
        type: integer
  schemas:
    Message:
      type: object
      properties:
        id:
          type: integer
        ticket_id:
          type: integer
        tenant_id:
          type: integer
        brand_id:
          type: integer
          nullable: true
        visibility:
          type: string
          enum: [public, internal]
        author_role:
          type: string
          enum: [agent, contact, system]
        body:
          type: string
        sent_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Ticket:
      type: object
      properties:
        id:
          type: integer
        tenant_id:
          type: integer
        brand_id:
          type: integer
          nullable: true
        subject:
          type: string
        status:
          type: string
        priority:
          type: string
        workflow_state:
          type: string
          nullable: true
        assignee:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            name:
              type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    TicketEvent:
      type: object
      properties:
        id:
          type: integer
        type:
          type: string
        visibility:
          type: string
        correlation_id:
          type: string
        payload:
          type: object
        broadcasted_at:
          type: string
          format: date-time
        ticket:
          $ref: '#/components/schemas/Ticket'
        initiator:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            name:
              type: string
        author:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            name:
              type: string
    Role:
      type: object
      properties:
        id:
          type: integer
        tenant_id:
          type: integer
        name:
          type: string
        slug:
          type: string
        description:
          type: string
          nullable: true
        is_system:
          type: boolean
        permissions:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
          nullable: true
        updated_at:
          type: string
          format: date-time
          nullable: true
    KbCategory:
      type: object
      properties:
        id:
          type: integer
        tenant_id:
          type: integer
        brand_id:
          type: integer
        name:
          type: string
        slug:
          type: string
        order:
          type: integer
        depth:
          type: integer
        path:
          type: string
          nullable: true
        parent_id:
          type: integer
          nullable: true
        parent:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            name:
              type: string
            slug:
              type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    KbArticle:
      type: object
      properties:
        id:
          type: integer
        tenant_id:
          type: integer
        brand_id:
          type: integer
        category_id:
          type: integer
        author_id:
          type: integer
          nullable: true
        title:
          type: string
        slug:
          type: string
        locale:
          type: string
        status:
          type: string
          enum: [draft, published, archived]
        content:
          type: string
        excerpt:
          type: string
          nullable: true
        metadata:
          type: object
          additionalProperties: true
          nullable: true
        published_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        category:
          $ref: '#/components/schemas/KbCategory'
        author:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            name:
              type: string
    AuditLog:
      type: object
      properties:
        id:
          type: integer
        tenant_id:
          type: integer
        brand_id:
          type: integer
          nullable: true
        action:
          type: string
        auditable_type:
          type: string
        auditable_id:
          type: integer
        changes:
          type: object
          additionalProperties: true
        actor:
          type: object
          nullable: true
          properties:
            id:
              type: integer
              nullable: true
            name:
              type: string
              nullable: true
        created_at:
          type: string
          format: date-time
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          required: [code, message]
          properties:
            code:
              type: string
              example: ERR_VALIDATION
            message:
              type: string
