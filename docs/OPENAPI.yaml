openapi: 3.1.0
description: Ticketre Service Desk API
info:
  title: Ticketre Service Desk API
  version: "1.0.0"
servers:
  - url: https://{host}
    variables:
      host:
        default: localhost
paths:
  /api/v1/health:
    get:
      summary: Application healthcheck
      tags: [System]
      responses:
        '200':
          description: Successful health response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  db:
                    type: string
                    example: ok
                  redis:
                    type: string
                    example: skipped
        '503':
          description: Dependency failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/tickets/{ticket}/messages:
    get:
      summary: List ticket messages
      tags: [Ticket Messages]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: ticket
          in: path
          required: true
          schema:
            type: integer
        - name: visibility
          in: query
          description: Optional visibility filter (agents only).
          schema:
            type: string
            enum: [public, internal]
      responses:
        '200':
          description: Collection of messages
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create ticket message
      tags: [Ticket Messages]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: ticket
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [body, visibility]
              properties:
                body:
                  type: string
                  description: Message content.
                visibility:
                  type: string
                  enum: [public, internal]
                sent_at:
                  type: string
                  format: date-time
      responses:
        '201':
          description: Message created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Message'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/tickets/{ticket}/messages/{message}:
    get:
      summary: Retrieve a single ticket message
      tags: [Ticket Messages]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketId'
        - $ref: '#/components/parameters/MessageId'
      responses:
        '200':
          description: Message detail
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Message'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update ticket message
      tags: [Ticket Messages]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketId'
        - $ref: '#/components/parameters/MessageId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                visibility:
                  type: string
                  enum: [public, internal]
                sent_at:
                  type: string
                  format: date-time
      responses:
        '200':
          description: Updated message
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Message'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete ticket message
      tags: [Ticket Messages]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketId'
        - $ref: '#/components/parameters/MessageId'
      responses:
        '204':
          description: Message deleted
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/tickets:
    get:
      summary: List tickets
      tags: [Tickets]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      responses:
        '200':
          description: Collection of tickets
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TicketResource'
                  links:
                    $ref: '#/components/schemas/PaginationLinks'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create ticket
      tags: [Tickets]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [subject, status, priority]
              properties:
                subject:
                  type: string
                status:
                  type: string
                  enum: [open, pending, closed]
                priority:
                  type: string
                  enum: [low, medium, high]
                assignee_id:
                  type: integer
                  nullable: true
                contact_id:
                  type: integer
                  nullable: true
                company_id:
                  type: integer
                  nullable: true
                metadata:
                  type: object
                custom_fields:
                  type: array
                  items:
                    type: object
                    required: [key, type, value]
                    properties:
                      key:
                        type: string
                        maxLength: 64
                        pattern: '^[A-Za-z0-9_.-]+$'
                      type:
                        type: string
                        enum: [string, number, boolean, date, json]
                      value:
                        oneOf:
                          - type: string
                          - type: number
                          - type: boolean
                          - type: object
                          - type: array
      responses:
        '201':
          description: Ticket created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TicketResource'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/tickets/{ticket}:
    get:
      summary: Retrieve ticket
      tags: [Tickets]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketId'
      responses:
        '200':
          description: Ticket detail
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TicketResource'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update ticket
      tags: [Tickets]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                subject:
                  type: string
                status:
                  type: string
                  enum: [open, pending, closed]
                priority:
                  type: string
                  enum: [low, medium, high]
                assignee_id:
                  type: integer
                  nullable: true
                metadata:
                  type: object
      responses:
        '200':
          description: Ticket updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TicketResource'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/tickets/{ticket}/events:
    get:
      summary: List ticket lifecycle events
      tags: [Ticket Events]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketId'
      responses:
        '200':
          description: Collection of lifecycle events
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TicketEvent'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/audit-logs:
    get:
      summary: List audit logs
      tags: [Audit Logs]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: action
          in: query
          description: Filter by audit action code.
          schema:
            type: string
        - name: auditable_type
          in: query
          description: Filter by audited model type.
          schema:
            type: string
            enum: [ticket, contact, message, kb_article, kb_category]
        - name: auditable_id
          in: query
          description: Restrict results to a specific audited record id.
          schema:
            type: integer
        - name: user_id
          in: query
          description: Filter by actor id.
          schema:
            type: integer
        - name: from
          in: query
          description: Return entries created on or after this ISO 8601 date.
          schema:
            type: string
            format: date
        - name: to
          in: query
          description: Return entries created on or before this ISO 8601 date.
          schema:
            type: string
            format: date
        - name: per_page
          in: query
          description: Results per page (default 15, max 100).
          schema:
            type: integer
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: Paginated audit log collection
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuditLog'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/contact-anonymization-requests:
    get:
      summary: List contact anonymization requests
      tags: [Compliance]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, processing, completed, failed]
        - name: contact_id
          in: query
          schema:
            type: integer
        - name: brand_id
          in: query
          schema:
            type: integer
        - name: per_page
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: Paginated anonymization requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ContactAnonymizationRequest'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Queue contact anonymization
      tags: [Compliance]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [contact_id, reason]
              properties:
                contact_id:
                  type: integer
                reason:
                  type: string
                  maxLength: 500
                correlation_id:
                  type: string
                  maxLength: 64
                  nullable: true
      responses:
        '201':
          description: Anonymization request created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ContactAnonymizationRequest'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/contact-anonymization-requests/{request}:
    get:
      summary: Show contact anonymization request
      tags: [Compliance]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/ContactAnonymizationRequestId'
      responses:
        '200':
          description: Request detail
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ContactAnonymizationRequest'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/anonymization-policies:
    get:
      summary: List anonymization policies
      tags: [Compliance]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, approved]
        - name: brand_id
          in: query
          schema:
            type: integer
        - name: per_page
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: Paginated anonymization policies
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AnonymizationPolicy'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create anonymization policy
      tags: [Compliance]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnonymizationPolicyCreate'
      responses:
        '201':
          description: Anonymization policy created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AnonymizationPolicy'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/anonymization-policies/{policy}:
    get:
      summary: Show anonymization policy
      tags: [Compliance]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/AnonymizationPolicyId'
      responses:
        '200':
          description: Policy detail
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AnonymizationPolicy'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update anonymization policy
      tags: [Compliance]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/AnonymizationPolicyId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnonymizationPolicyUpdate'
      responses:
        '200':
          description: Updated policy
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AnonymizationPolicy'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete anonymization policy
      tags: [Compliance]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/AnonymizationPolicyId'
      responses:
        '204':
          description: Policy deleted
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/ticket-deletion-requests:
    get:
      summary: List ticket deletion requests
      tags: [Compliance]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, approved, processing, completed, failed, cancelled]
        - name: ticket_id
          in: query
          schema:
            type: integer
        - name: brand_id
          in: query
          schema:
            type: integer
        - name: per_page
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: Paginated deletion requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TicketDeletionRequest'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Register ticket deletion request
      tags: [Compliance]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ticket_id, reason]
              properties:
                ticket_id:
                  type: integer
                reason:
                  type: string
                  maxLength: 500
                correlation_id:
                  type: string
                  maxLength: 64
                  nullable: true
      responses:
        '201':
          description: Deletion request created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TicketDeletionRequest'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/ticket-deletion-requests/{ticketDeletionRequest}:
    get:
      summary: Show ticket deletion request
      tags: [Compliance]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketDeletionRequestId'
      responses:
        '200':
          description: Request detail
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TicketDeletionRequest'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/ticket-deletion-requests/{ticketDeletionRequest}/approve:
    post:
      summary: Approve ticket deletion request
      tags: [Compliance]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketDeletionRequestId'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                hold_hours:
                  type: integer
                  minimum: 0
                  maximum: 168
      responses:
        '200':
          description: Updated request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TicketDeletionRequest'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/ticket-deletion-requests/{ticketDeletionRequest}/cancel:
    post:
      summary: Cancel ticket deletion request
      tags: [Compliance]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketDeletionRequestId'
      responses:
        '200':
          description: Updated request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TicketDeletionRequest'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/ticket-workflows:
    get:
      summary: List ticket workflows
      tags: [Ticket Workflows]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      responses:
        '200':
          description: Collection of workflows
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketWorkflowCollection'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create ticket workflow
      tags: [Ticket Workflows]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketWorkflowRequest'
      responses:
        '201':
          description: Created workflow
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketWorkflowResource'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/ticket-workflows/{ticketWorkflow}:
    get:
      summary: Show ticket workflow
      tags: [Ticket Workflows]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: ticketWorkflow
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Workflow details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketWorkflowResource'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update ticket workflow
      tags: [Ticket Workflows]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: ticketWorkflow
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketWorkflowRequest'
      responses:
        '200':
          description: Workflow updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketWorkflowResource'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/teams:
    get:
      summary: List teams
      tags: [Teams]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      responses:
        '200':
          description: Collection of teams
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TeamResource'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create team
      tags: [Teams]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamRequest'
      responses:
        '201':
          description: Created team
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TeamResource'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/teams/{team}:
    get:
      summary: Show team
      tags: [Teams]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TeamId'
      responses:
        '200':
          description: Team details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TeamResource'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update team
      tags: [Teams]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TeamId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamRequest'
      responses:
        '200':
          description: Updated team
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TeamResource'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete team
      tags: [Teams]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TeamId'
      responses:
        '204':
          description: Team deleted
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/teams/{team}/memberships:
    get:
      summary: List team memberships
      tags: [Teams]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TeamId'
      responses:
        '200':
          description: Collection of memberships
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TeamMembershipResource'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Attach team membership
      tags: [Teams]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TeamId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamMembershipCreateRequest'
      responses:
        '201':
          description: Created membership
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TeamMembershipResource'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/teams/{team}/memberships/{teamMembership}:
    get:
      summary: Show team membership
      tags: [Teams]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TeamId'
        - $ref: '#/components/parameters/TeamMembershipId'
      responses:
        '200':
          description: Membership details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TeamMembershipResource'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update team membership
      tags: [Teams]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TeamId'
        - $ref: '#/components/parameters/TeamMembershipId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamMembershipUpdateRequest'
      responses:
        '200':
          description: Updated membership
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TeamMembershipResource'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete team membership
      tags: [Teams]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TeamId'
        - $ref: '#/components/parameters/TeamMembershipId'
      responses:
        '204':
          description: Membership deleted
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete ticket workflow
      tags: [Ticket Workflows]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: ticketWorkflow
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Workflow deleted
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/ticket-merges:
    get:
      summary: List ticket merges
      tags: [Tickets]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: status
          in: query
          schema:
            type: string
        - name: primary_ticket_id
          in: query
          schema:
            type: integer
        - name: brand_id
          in: query
          schema:
            type: integer
        - name: per_page
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: Collection of ticket merges
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TicketMergeResource'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create ticket merge
      tags: [Tickets]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketMergeCreateRequest'
      responses:
        '201':
          description: Ticket merge created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TicketMergeResource'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/ticket-merges/{ticketMerge}:
    get:
      summary: Retrieve ticket merge
      tags: [Tickets]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketMergeId'
      responses:
        '200':
          description: Ticket merge detail
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TicketMergeResource'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/kb-categories:
    get:
      summary: List knowledge base categories
      tags: [Knowledge Base]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      responses:
        '200':
          description: Collection of categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/KbCategory'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create knowledge base category
      tags: [Knowledge Base]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [brand_id, name, slug]
              properties:
                brand_id:
                  type: integer
                name:
                  type: string
                slug:
                  type: string
                parent_id:
                  type: integer
                  nullable: true
                order:
                  type: integer
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/KbCategory'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/kb-categories/{category}:
    get:
      summary: Retrieve knowledge base category
      tags: [Knowledge Base]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/KbCategoryId'
      responses:
        '200':
          description: Category detail
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/KbCategory'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update knowledge base category
      tags: [Knowledge Base]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/KbCategoryId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                brand_id:
                  type: integer
                name:
                  type: string
                slug:
                  type: string
                parent_id:
                  type: integer
                  nullable: true
                order:
                  type: integer
      responses:
        '200':
          description: Updated category
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/KbCategory'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete knowledge base category
      tags: [Knowledge Base]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/KbCategoryId'
      responses:
        '204':
          description: Category deleted
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/kb-articles/search:
    get:
      summary: Search knowledge base articles
      tags: [Knowledge Base]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: q
          in: query
          required: true
          schema:
            type: string
            minLength: 2
            maxLength: 255
        - name: locale
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, published, archived]
        - name: category_id
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/KbArticleSearchResult'
                  meta:
                    type: object
                    properties:
                      correlation_id:
                        type: string
                        description: Correlation identifier echoed from the request header or generated server-side.
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/kb-articles:
    get:
      summary: List knowledge base articles
      tags: [Knowledge Base]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, published, archived]
        - name: locale
          in: query
          schema:
            type: string
        - name: category_id
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Collection of articles
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/KbArticle'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create knowledge base article
      description: "Stores knowledge base translations after sanitizing HTML against the configured allow list. Sanitization removals trigger a kb_article.sanitization_blocked audit entry with redacted metadata."
      tags: [Knowledge Base]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KbArticleCreateRequest'
      responses:
        '201':
          description: Article created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/KbArticle'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/kb-articles/{article}:
    get:
      summary: Retrieve knowledge base article
      tags: [Knowledge Base]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/KbArticleId'
      responses:
        '200':
          description: Article detail
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/KbArticle'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update knowledge base article
      tags: [Knowledge Base]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/KbArticleId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KbArticleUpdateRequest'
      responses:
        '200':
          description: Updated article
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/KbArticle'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete knowledge base article
      tags: [Knowledge Base]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/KbArticleId'
      responses:
        '204':
          description: Article deleted
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/portal/tickets:
    post:
      summary: Submit ticket via customer portal
      tags: [Portal Tickets]
      security: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortalTicketSubmissionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PortalTicketSubmissionUploadRequest'
      responses:
        '201':
          description: Ticket submission accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PortalTicketSubmission'
        '403':
          description: Forbidden (authenticated user lacks portal permissions or tenant scope)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Tenant not resolved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/ticket-submissions:
    get:
      summary: List ticket submissions
      tags: [Ticket Submissions]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: channel
          in: query
          schema:
            type: string
            enum: [portal, email, chat, api]
        - name: status
          in: query
          schema:
            type: string
            enum: [accepted, pending, failed]
        - name: search
          in: query
          schema:
            type: string
            maxLength: 255
      responses:
        '200':
          description: Submission list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TicketSubmission'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/ticket-submissions/{ticketSubmission}:
    get:
      summary: View ticket submission detail
      tags: [Ticket Submissions]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: ticketSubmission
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Submission detail
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TicketSubmission'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/broadcast-connections:
    get:
      summary: List broadcast connections
      tags: [Broadcasting]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      responses:
        '200':
          description: Broadcast connection collection
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/BroadcastConnectionResource'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create broadcast connection
      tags: [Broadcasting]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BroadcastConnectionCreateRequest'
      responses:
        '201':
          description: Connection created
          headers:
            X-Correlation-ID:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/BroadcastConnectionResource'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/broadcast-connections/{broadcastConnection}:
    get:
      summary: Show broadcast connection
      tags: [Broadcasting]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: broadcastConnection
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Connection detail
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/BroadcastConnectionResource'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update broadcast connection
      tags: [Broadcasting]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: broadcastConnection
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BroadcastConnectionUpdateRequest'
      responses:
        '200':
          description: Updated connection
          headers:
            X-Correlation-ID:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/BroadcastConnectionResource'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete broadcast connection
      tags: [Broadcasting]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: broadcastConnection
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Connection deleted
          headers:
            X-Correlation-ID:
              schema:
                type: string
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/broadcasting/auth:
    post:
      summary: Authenticate broadcast channel
      tags: [Broadcasting]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BroadcastAuthRequest'
      responses:
        '200':
          description: Signed authentication payload
          headers:
            X-Correlation-ID:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BroadcastAuthResponse'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/companies:
    get:
      summary: List companies
      tags: [Companies]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: search
          in: query
          description: Partial match on the company name or domain.
          schema:
            type: string
        - name: tag
          in: query
          description: Filter by a specific tag.
          schema:
            type: string
      responses:
        '200':
          description: Collection of companies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyCollection'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create company
      tags: [Companies]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyRequest'
      responses:
        '201':
          description: Created company
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CompanyResource'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/companies/{company}:
    get:
      summary: Show company
      tags: [Companies]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/CompanyId'
      responses:
        '200':
          description: Company details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CompanyResource'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update company
      tags: [Companies]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/CompanyId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyRequest'
      responses:
        '200':
          description: Updated company
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CompanyResource'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete company
      tags: [Companies]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/CompanyId'
      responses:
        '204':
          description: Company deleted
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/contacts:
    get:
      summary: List contacts
      tags: [Contacts]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: search
          in: query
          description: Partial match on name, email, or phone number.
          schema:
            type: string
        - name: company_id
          in: query
          description: Filter contacts by company identifier.
          schema:
            type: integer
        - name: tag
          in: query
          description: Filter contacts by a specific tag.
          schema:
            type: string
      responses:
        '200':
          description: Collection of contacts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactCollection'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create contact
      tags: [Contacts]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactRequest'
      responses:
        '201':
          description: Created contact
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ContactResource'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/contacts/{contact}:
    get:
      summary: Show contact
      tags: [Contacts]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/ContactId'
      responses:
        '200':
          description: Contact details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ContactResource'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update contact
      tags: [Contacts]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/ContactId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactRequest'
      responses:
        '200':
          description: Updated contact
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ContactResource'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete contact
      tags: [Contacts]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/ContactId'
      responses:
        '204':
          description: Contact deleted
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/permissions:
    get:
      summary: List permissions
      tags: [Permissions]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: search
          in: query
          description: Optional name/slug search term.
          schema:
            type: string
        - name: brand
          in: query
          description: Filter by brand (`brand=global` for tenant-wide permissions).
          schema:
            type: string
      responses:
        '200':
          description: Collection of permissions
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PermissionResource'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create permission
      tags: [Permissions]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                description:
                  type: string
                  nullable: true
                brand_id:
                  type: integer
                  nullable: true
      responses:
        '201':
          description: Permission created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PermissionResource'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/permissions/{permission}:
    get:
      summary: Show permission
      tags: [Permissions]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/PermissionId'
      responses:
        '200':
          description: Permission details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PermissionResource'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update permission
      tags: [Permissions]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/PermissionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                  nullable: true
                brand_id:
                  type: integer
                  nullable: true
      responses:
        '200':
          description: Updated permission
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PermissionResource'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete permission
      tags: [Permissions]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/PermissionId'
      responses:
        '204':
          description: Permission deleted
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: laravel_session
  parameters:
    TenantHeader:
      name: X-Tenant
      in: header
      required: true
      schema:
        type: string
    BrandHeader:
      name: X-Brand
      in: header
      required: false
      schema:
        type: string
    TicketId:
      name: ticket
      in: path
      required: true
      schema:
        type: integer
    CompanyId:
      name: company
      in: path
      required: true
      schema:
        type: integer
    ContactId:
      name: contact
      in: path
      required: true
      schema:
        type: integer
    MessageId:
      name: message
      in: path
      required: true
      schema:
        type: integer
    KbCategoryId:
      name: category
      in: path
      required: true
      schema:
        type: integer
    KbArticleId:
      name: article
      in: path
      required: true
      schema:
        type: integer
    RoleId:
      name: role
      in: path
      required: true
      schema:
        type: integer
    PermissionId:
      name: permission
      in: path
      required: true
      schema:
        type: integer
    TeamId:
      name: team
      in: path
      required: true
      schema:
        type: integer
    TeamMembershipId:
      name: teamMembership
      in: path
      required: true
      schema:
        type: integer
    AnonymizationPolicyId:
      name: policy
      in: path
      required: true
      schema:
        type: integer
    ContactAnonymizationRequestId:
      name: request
      in: path
      required: true
      schema:
        type: integer
    TicketDeletionRequestId:
      name: ticketDeletionRequest
      in: path
      required: true
      schema:
        type: integer
    TicketRelationshipId:
      name: ticketRelationship
      in: path
      required: true
      schema:
        type: integer
    TicketMergeId:
      name: ticketMerge
      in: path
      required: true
      schema:
        type: integer
  schemas:
    Message:
      type: object
      properties:
        id:
          type: integer
        ticket_id:
          type: integer
        tenant_id:
          type: integer
        brand_id:
          type: integer
          nullable: true
        visibility:
          type: string
          enum: [public, internal]
        author_role:
          type: string
          enum: [agent, contact, system]
        body:
          type: string
        sent_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    BroadcastConnectionResource:
      type: object
      properties:
        type:
          type: string
          enum: [broadcast-connections]
        id:
          type: string
        attributes:
          type: object
          properties:
            tenant_id:
              type: integer
            brand_id:
              type: integer
              nullable: true
            user_id:
              type: integer
              nullable: true
            connection_id:
              type: string
            channel_name:
              type: string
            status:
              type: string
              enum: [active, stale, disconnected]
            latency_ms:
              type: integer
              nullable: true
            last_seen_at:
              type: string
              format: date-time
              nullable: true
            metadata:
              type: object
              additionalProperties: {}
            correlation_id:
              type: string
              nullable: true
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
    BroadcastConnectionCreateRequest:
      type: object
      required: [connection_id, channel_name, status]
      properties:
        brand_id:
          type: integer
          nullable: true
        user_id:
          type: integer
          nullable: true
        connection_id:
          type: string
          maxLength: 255
        channel_name:
          type: string
          maxLength: 255
        status:
          type: string
          enum: [active, stale, disconnected]
        latency_ms:
          type: integer
          minimum: 0
          nullable: true
        last_seen_at:
          type: string
          format: date-time
          nullable: true
        metadata:
          type: object
          additionalProperties: {}
    BroadcastConnectionUpdateRequest:
      type: object
      properties:
        brand_id:
          type: integer
          nullable: true
        user_id:
          type: integer
          nullable: true
        connection_id:
          type: string
          maxLength: 255
        channel_name:
          type: string
          maxLength: 255
        status:
          type: string
          enum: [active, stale, disconnected]
        latency_ms:
          type: integer
          minimum: 0
          nullable: true
        last_seen_at:
          type: string
          format: date-time
          nullable: true
        metadata:
          type: object
          additionalProperties: {}
    BroadcastAuthRequest:
      type: object
      required: [channel_name, socket_id]
      properties:
        channel_name:
          type: string
        socket_id:
          type: string
        channel_data:
          type: string
          nullable: true
    BroadcastAuthResponse:
      type: object
      properties:
        auth:
          type: string
        channel_data:
          type: string
          nullable: true
        correlation_id:
          type: string
    TicketResource:
      type: object
      properties:
        type:
          type: string
          enum: [tickets]
        id:
          type: string
        attributes:
          type: object
          properties:
            tenant_id:
              type: integer
            brand_id:
              type: integer
              nullable: true
            subject:
              type: string
            status:
              type: string
            priority:
              type: string
            channel:
              type: string
            department:
              type: string
              nullable: true
            category:
              type: string
              nullable: true
            workflow_state:
              type: string
              nullable: true
            metadata:
              type: object
            custom_fields:
              type: array
              items:
                $ref: '#/components/schemas/TicketCustomField'
            sla_due_at:
              type: string
              format: date-time
              nullable: true
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
    TicketMergeResource:
      type: object
      required: [type, id, attributes]
      properties:
        type:
          type: string
          enum: [ticket_merges]
        id:
          type: string
        attributes:
          type: object
          required:
            - tenant_id
            - status
            - primary_ticket_id
            - secondary_ticket_id
            - initiated_by
            - created_at
            - updated_at
          properties:
            tenant_id:
              type: integer
            brand_id:
              type: integer
              nullable: true
            status:
              type: string
              enum: [pending, processing, completed, failed]
            summary:
              type: object
              additionalProperties: true
            correlation_id:
              type: string
              nullable: true
            completed_at:
              type: string
              format: date-time
              nullable: true
            failed_at:
              type: string
              format: date-time
              nullable: true
            failure_reason:
              type: string
              nullable: true
            primary_ticket_id:
              type: integer
            secondary_ticket_id:
              type: integer
            initiated_by:
              type: integer
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
        relationships:
          type: object
          properties:
            primary_ticket:
              type: object
              nullable: true
              properties:
                data:
                  type: object
                  properties:
                    type:
                      type: string
                      enum: [tickets]
                    id:
                      type: string
                    attributes:
                      type: object
                      properties:
                        subject:
                          type: string
                          nullable: true
                        status:
                          type: string
                          nullable: true
            secondary_ticket:
              type: object
              nullable: true
              properties:
                data:
                  type: object
                  properties:
                    type:
                      type: string
                      enum: [tickets]
                    id:
                      type: string
                    attributes:
                      type: object
                      properties:
                        subject:
                          type: string
                          nullable: true
                        status:
                          type: string
                          nullable: true
            initiator:
              type: object
              nullable: true
              properties:
                data:
                  type: object
                  properties:
                    type:
                      type: string
                      enum: [users]
                    id:
                      type: string
                    attributes:
                      type: object
                      properties:
                        name:
                          type: string
                          nullable: true
                        email:
                          type: string
                          format: email
                          nullable: true
        links:
          type: object
          properties:
            self:
              type: string
              format: uri
    TicketWorkflowState:
      type: object
      required: [id, name, slug, position, is_initial, is_terminal]
      properties:
        id:
          type: integer
        name:
          type: string
        slug:
          type: string
        position:
          type: integer
        is_initial:
          type: boolean
        is_terminal:
          type: boolean
        sla_minutes:
          type: integer
          nullable: true
        entry_hook:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
    TicketWorkflowTransition:
      type: object
      required: [id, from, to, requires_comment]
      properties:
        id:
          type: integer
        from:
          type: string
        to:
          type: string
        guard_hook:
          type: string
          nullable: true
        requires_comment:
          type: boolean
        metadata:
          type: object
          additionalProperties: true
    TicketWorkflowResource:
      type: object
      required: [type, id, attributes]
      properties:
        type:
          type: string
          enum: [ticket_workflows]
        id:
          type: string
        attributes:
          type: object
          required:
            - tenant_id
            - name
            - slug
            - is_default
            - created_at
            - updated_at
          properties:
            tenant_id:
              type: integer
            brand_id:
              type: integer
              nullable: true
            name:
              type: string
            slug:
              type: string
            description:
              type: string
              nullable: true
            is_default:
              type: boolean
            states:
              type: array
              items:
                $ref: '#/components/schemas/TicketWorkflowState'
            transitions:
              type: array
              items:
                $ref: '#/components/schemas/TicketWorkflowTransition'
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
    TicketWorkflowCollection:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/TicketWorkflowResource'
    TicketWorkflowRequest:
      type: object
      required: [name, slug, states]
      properties:
        name:
          type: string
        slug:
          type: string
        description:
          type: string
          nullable: true
        is_default:
          type: boolean
          default: false
        brand_id:
          type: integer
          nullable: true
        states:
          type: array
          items:
            type: object
            required: [name, slug]
            properties:
              id:
                type: integer
                nullable: true
              name:
                type: string
              slug:
                type: string
              position:
                type: integer
                nullable: true
              is_initial:
                type: boolean
                default: false
              is_terminal:
                type: boolean
                default: false
              sla_minutes:
                type: integer
                nullable: true
              entry_hook:
                type: string
                nullable: true
              description:
                type: string
                nullable: true
        transitions:
          type: array
          items:
            type: object
            required: [from, to]
            properties:
              id:
                type: integer
                nullable: true
              from:
                type: string
              to:
                type: string
              guard_hook:
                type: string
                nullable: true
              requires_comment:
                type: boolean
              default: false
              metadata:
                type: object
                additionalProperties: true
    CompanyResource:
      type: object
      required: [type, id, attributes]
      properties:
        type:
          type: string
          enum: [companies]
        id:
          type: string
        attributes:
          type: object
          required: [tenant_id, name, tags, metadata, created_at, updated_at]
          properties:
            tenant_id:
              type: integer
            brand_id:
              type: integer
              nullable: true
            name:
              type: string
            domain:
              type: string
              nullable: true
            tags:
              type: array
              items:
                type: string
            metadata:
              type: object
              additionalProperties: {}
            contacts_count:
              type: integer
              nullable: true
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
        relationships:
          type: object
          properties:
            contacts:
              type: array
              items:
                $ref: '#/components/schemas/ContactResource'
    CompanyCollection:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CompanyResource'
    CompanyRequest:
      type: object
      required: [name]
      properties:
        name:
          type: string
        domain:
          type: string
          nullable: true
        brand_id:
          type: integer
          nullable: true
        tags:
          type: array
          items:
            type: string
        metadata:
          type: object
          additionalProperties: {}
    PermissionResource:
      type: object
      required: [type, id, attributes]
      properties:
        type:
          type: string
          enum: [permissions]
        id:
          type: string
        attributes:
          type: object
          required: [tenant_id, brand_id, name, slug, is_system]
          properties:
            tenant_id:
              type: integer
              nullable: true
            brand_id:
              type: integer
              nullable: true
            name:
              type: string
            slug:
              type: string
            description:
              type: string
              nullable: true
            is_system:
              type: boolean
            created_at:
              type: string
              format: date-time
              nullable: true
            updated_at:
              type: string
              format: date-time
              nullable: true
        brand:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            name:
              type: string
              nullable: true
    ContactResource:
      type: object
      required: [type, id, attributes]
      properties:
        type:
          type: string
          enum: [contacts]
        id:
          type: string
        attributes:
          type: object
          required: [tenant_id, name, email, gdpr_marketing_opt_in, gdpr_data_processing_opt_in, created_at, updated_at]
          properties:
            tenant_id:
              type: integer
            brand_id:
              type: integer
              nullable: true
            company_id:
              type: integer
              nullable: true
            name:
              type: string
            email:
              type: string
              format: email
            phone:
              type: string
              nullable: true
            tags:
              type: array
              items:
                type: string
            metadata:
              type: object
              additionalProperties: {}
            gdpr_marketing_opt_in:
              type: boolean
            gdpr_data_processing_opt_in:
              type: boolean
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
        relationships:
          type: object
          properties:
            company:
              nullable: true
              oneOf:
                - $ref: '#/components/schemas/CompanyResource'
                - type: 'null'
    ContactCollection:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ContactResource'
    ContactRequest:
      type: object
      required: [name, email, gdpr_marketing_opt_in, gdpr_data_processing_opt_in]
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
          nullable: true
        company_id:
          type: integer
          nullable: true
        brand_id:
          type: integer
          nullable: true
        tags:
          type: array
          items:
            type: string
        metadata:
          type: object
          additionalProperties: {}
        gdpr_marketing_opt_in:
          type: boolean
        gdpr_data_processing_opt_in:
          type: boolean
    TeamResource:
      type: object
      required: [type, id, attributes]
      properties:
        type:
          type: string
          enum: [teams]
        id:
          type: string
        attributes:
          type: object
          required: [tenant_id, name, slug, created_at, updated_at]
          properties:
            tenant_id:
              type: integer
            brand_id:
              type: integer
              nullable: true
            name:
              type: string
            slug:
              type: string
            default_queue:
              type: string
              nullable: true
            description:
              type: string
              nullable: true
            memberships_count:
              type: integer
              nullable: true
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
        relationships:
          type: object
          properties:
            memberships:
              type: array
              items:
                $ref: '#/components/schemas/TeamMembershipResource'
    TeamCollection:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/TeamResource'
    TeamRequest:
      type: object
      required: [name]
      properties:
        name:
          type: string
        slug:
          type: string
          nullable: true
        default_queue:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        brand_id:
          type: integer
          nullable: true
    TeamMembershipResource:
      type: object
      required: [type, id, attributes]
      properties:
        type:
          type: string
          enum: [team_memberships]
        id:
          type: string
        attributes:
          type: object
          required: [team_id, user_id, role, is_primary, created_at, updated_at]
          properties:
            team_id:
              type: integer
            user_id:
              type: integer
            role:
              type: string
              enum: [lead, member]
            is_primary:
              type: boolean
            joined_at:
              type: string
              format: date-time
              nullable: true
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
        relationships:
          type: object
          properties:
            user:
              type: object
              nullable: true
              properties:
                data:
                  type: object
                  nullable: true
                  properties:
                    type:
                      type: string
                      enum: [users]
                    id:
                      type: string
                    attributes:
                      type: object
                      properties:
                        name:
                          type: string
                          nullable: true
                        email:
                          type: string
                          format: email
                          nullable: true
    TeamMembershipCreateRequest:
      type: object
      required: [user_id, role]
      properties:
        user_id:
          type: integer
        role:
          type: string
          enum: [lead, member]
        is_primary:
          type: boolean
        joined_at:
          type: string
          format: date-time
          nullable: true
    TeamMembershipUpdateRequest:
      type: object
      properties:
        role:
          type: string
          enum: [lead, member]
        is_primary:
          type: boolean
        joined_at:
          type: string
          format: date-time
          nullable: true
    TicketMergeCreateRequest:
      type: object
      required: [primary_ticket_id, secondary_ticket_id]
      properties:
        primary_ticket_id:
          type: integer
          minimum: 1
        secondary_ticket_id:
          type: integer
          minimum: 1
        correlation_id:
          type: string
          maxLength: 64
          nullable: true
    TicketCustomField:
      type: object
      required: [key, type, value]
      properties:
        key:
          type: string
        type:
          type: string
        value:
          oneOf:
            - type: string
            - type: number
            - type: boolean
            - type: object
            - type: array
    PaginationLinks:
      type: object
      properties:
        first:
          type: string
          format: uri
          nullable: true
        last:
          type: string
          format: uri
          nullable: true
        prev:
          type: string
          format: uri
          nullable: true
        next:
          type: string
          format: uri
          nullable: true
    PaginationMeta:
      type: object
      properties:
        current_page:
          type: integer
        last_page:
          type: integer
        per_page:
          type: integer
        total:
          type: integer
    TicketEvent:
      type: object
      properties:
        id:
          type: integer
        type:
          type: string
        visibility:
          type: string
        correlation_id:
          type: string
        payload:
          type: object
        broadcasted_at:
          type: string
          format: date-time
        ticket:
          $ref: '#/components/schemas/TicketSummary'
        initiator:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            name:
              type: string
        author:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            name:
              type: string
    TicketSummary:
      type: object
      properties:
        id:
          type: integer
        subject:
          type: string
        status:
          type: string
        priority:
          type: string
        workflow_state:
          type: string
          nullable: true
        assignee_id:
          type: integer
          nullable: true
    Role:
      type: object
      properties:
        id:
          type: integer
        tenant_id:
          type: integer
        name:
          type: string
        slug:
          type: string
        description:
          type: string
          nullable: true
        is_system:
          type: boolean
        permissions:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
          nullable: true
        updated_at:
          type: string
          format: date-time
          nullable: true
    KbCategory:
      type: object
      properties:
        id:
          type: integer
        tenant_id:
          type: integer
        brand_id:
          type: integer
        name:
          type: string
        slug:
          type: string
        order:
          type: integer
        depth:
          type: integer
        path:
          type: string
          nullable: true
        parent_id:
          type: integer
          nullable: true
        parent:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            name:
              type: string
            slug:
              type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    KbArticle:
      type: object
      properties:
        id:
          type: integer
        tenant_id:
          type: integer
        brand_id:
          type: integer
        category_id:
          type: integer
        author_id:
          type: integer
          nullable: true
        slug:
          type: string
        default_locale:
          type: string
        locale:
          type: string
          description: The locale that was selected for this response (requested locale or default).
        title:
          type: string
        status:
          type: string
          enum: [draft, published, archived]
        content:
          type: string
          description: Sanitized HTML body. Disallowed tags, inline event handlers, and unsafe protocols are stripped before persistence.
        excerpt:
          type: string
          nullable: true
        metadata:
          type: object
          additionalProperties: true
          nullable: true
        published_at:
          type: string
          format: date-time
          nullable: true
        translations:
          type: array
          items:
            $ref: '#/components/schemas/KbArticleTranslation'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        category:
          $ref: '#/components/schemas/KbCategory'
        author:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            name:
              type: string
    KbArticleSearchResult:
      allOf:
        - $ref: '#/components/schemas/KbArticle'
        - type: object
          properties:
            score:
              type: number
              format: float
              nullable: true
            highlights:
              type: object
              nullable: true
              additionalProperties: true
              description: Highlight snippets provided by Meilisearch for matching fields.
    KbArticleTranslation:
      type: object
      properties:
        id:
          type: integer
          nullable: true
        locale:
          type: string
        title:
          type: string
        status:
          type: string
          enum: [draft, published, archived]
        content:
          type: string
          description: Sanitized HTML body. Disallowed tags, inline event handlers, and unsafe protocols are stripped before persistence.
        excerpt:
          type: string
          nullable: true
          description: Plain text excerpt derived from the sanitized content.
        metadata:
          type: object
          additionalProperties: true
          nullable: true
        published_at:
          type: string
          format: date-time
          nullable: true
    KbArticleTranslationInput:
      type: object
      required: [locale, title, status, content]
      properties:
        locale:
          type: string
        title:
          type: string
        status:
          type: string
          enum: [draft, published, archived]
        content:
          type: string
          description: Raw HTML submitted by authors; sanitized against the knowledge base allow list prior to storage.
        excerpt:
          type: string
          nullable: true
          description: Optional excerpt that is sanitized to plain text before persistence.
        metadata:
          type: object
          additionalProperties: true
          nullable: true
        published_at:
          type: string
          format: date-time
          nullable: true
    KbArticleTranslationUpsert:
      allOf:
        - $ref: '#/components/schemas/KbArticleTranslationInput'
        - type: object
          properties:
            delete:
              type: boolean
              description: When true the specified locale will be soft deleted.
    KbArticleCreateRequest:
      type: object
      required: [brand_id, category_id, slug, translations]
      properties:
        brand_id:
          type: integer
        category_id:
          type: integer
        slug:
          type: string
        default_locale:
          type: string
          nullable: true
        author_id:
          type: integer
          nullable: true
        translations:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/KbArticleTranslationInput'
    KbArticleUpdateRequest:
      type: object
      properties:
        brand_id:
          type: integer
        category_id:
          type: integer
        slug:
          type: string
        default_locale:
          type: string
        author_id:
          type: integer
          nullable: true
        translations:
          type: array
          items:
            $ref: '#/components/schemas/KbArticleTranslationUpsert'
    AuditLog:
      type: object
      properties:
        id:
          type: integer
        tenant_id:
          type: integer
        brand_id:
          type: integer
          nullable: true
        action:
          type: string
        auditable_type:
          type: string
        auditable_id:
          type: integer
        changes:
          type: object
          additionalProperties: true
        actor:
          type: object
          nullable: true
          properties:
            id:
              type: integer
              nullable: true
            name:
              type: string
              nullable: true
        created_at:
          type: string
          format: date-time
    ContactAnonymizationRequest:
      type: object
      properties:
        id:
          type: integer
        tenant_id:
          type: integer
        brand_id:
          type: integer
          nullable: true
        contact_id:
          type: integer
        requested_by:
          type: integer
        status:
          type: string
          enum: [pending, processing, completed, failed]
        reason:
          type: string
        correlation_id:
          type: string
        pseudonym:
          type: string
          nullable: true
        processed_at:
          type: string
          format: date-time
          nullable: true
        failed_at:
          type: string
          format: date-time
          nullable: true
        failure_reason:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        contact:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            name:
              type: string
    AnonymizationPolicy:
      type: object
      properties:
        id:
          type: integer
        tenant_id:
          type: integer
        brand_id:
          type: integer
          nullable: true
        title:
          type: string
        status:
          type: string
          enum: [draft, approved]
        description:
          type: string
          nullable: true
        contact_anonymize_fields:
          type: array
          items:
            type: string
        contact_delete_fields:
          type: array
          items:
            type: string
        ticket_anonymize_fields:
          type: array
          items:
            type: string
        ticket_delete_fields:
          type: array
          items:
            type: string
        retention_period_days:
          type: integer
        retention_notes:
          type: string
          nullable: true
        subject_request_procedure:
          type: string
        approval_notes:
          type: string
          nullable: true
        approved_at:
          type: string
          format: date-time
          nullable: true
        approved_by_id:
          type: integer
          nullable: true
        effective_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        approved_by:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            name:
              type: string
              nullable: true
            email:
              type: string
              nullable: true
    AnonymizationPolicyCreate:
      type: object
      required: [title, subject_request_procedure, retention_period_days]
      properties:
        title:
          type: string
          maxLength: 255
        status:
          type: string
          enum: [draft, approved]
          nullable: true
        description:
          type: string
          nullable: true
        contact_anonymize_fields:
          type: array
          items:
            type: string
        contact_delete_fields:
          type: array
          items:
            type: string
        ticket_anonymize_fields:
          type: array
          items:
            type: string
        ticket_delete_fields:
          type: array
          items:
            type: string
        retention_period_days:
          type: integer
          minimum: 0
        retention_notes:
          type: string
          nullable: true
        subject_request_procedure:
          type: string
        approval_notes:
          type: string
          nullable: true
        approved_at:
          type: string
          format: date-time
          nullable: true
        approved_by_id:
          type: integer
          nullable: true
        effective_at:
          type: string
          format: date-time
          nullable: true
        brand_id:
          type: integer
          nullable: true
        correlation_id:
          type: string
          maxLength: 64
          nullable: true
    AnonymizationPolicyUpdate:
      type: object
      properties:
        title:
          type: string
          maxLength: 255
        status:
          type: string
          enum: [draft, approved]
        description:
          type: string
          nullable: true
        contact_anonymize_fields:
          type: array
          items:
            type: string
        contact_delete_fields:
          type: array
          items:
            type: string
        ticket_anonymize_fields:
          type: array
          items:
            type: string
        ticket_delete_fields:
          type: array
          items:
            type: string
        retention_period_days:
          type: integer
          minimum: 0
        retention_notes:
          type: string
          nullable: true
        subject_request_procedure:
          type: string
        approval_notes:
          type: string
          nullable: true
        approved_at:
          type: string
          format: date-time
          nullable: true
        approved_by_id:
          type: integer
          nullable: true
        effective_at:
          type: string
          format: date-time
          nullable: true
        brand_id:
          type: integer
          nullable: true
        correlation_id:
          type: string
          maxLength: 64
          nullable: true
            email:
              type: string
              nullable: true
        requester:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            name:
              type: string
    TicketDeletionRequest:
      type: object
      properties:
        id:
          type: integer
        tenant_id:
          type: integer
        brand_id:
          type: integer
          nullable: true
        ticket_id:
          type: integer
        requested_by:
          type: integer
        approved_by:
          type: integer
          nullable: true
        cancelled_by:
          type: integer
          nullable: true
        status:
          type: string
          enum: [pending, approved, processing, completed, failed, cancelled]
        reason:
          type: string
        aggregate_snapshot:
          type: object
          nullable: true
          additionalProperties: true
        correlation_id:
          type: string
        approved_at:
          type: string
          format: date-time
          nullable: true
        hold_expires_at:
          type: string
          format: date-time
          nullable: true
        cancelled_at:
          type: string
          format: date-time
          nullable: true
        processed_at:
          type: string
          format: date-time
          nullable: true
        failed_at:
          type: string
          format: date-time
          nullable: true
        failure_reason:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        ticket:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            status:
              type: string
            priority:
              type: string
        requester:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            name:
              type: string
        approver:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            name:
              type: string
        canceller:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            name:
              type: string
    PortalTicketSubmissionRequest:
      type: object
      required: [name, email, subject, message]
      properties:
        name:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 255
        subject:
          type: string
          maxLength: 255
        message:
          type: string
          minLength: 10
        tags:
          type: array
          maxItems: 5
          items:
            type: string
            maxLength: 50
    PortalTicketSubmissionUploadRequest:
      type: object
      required: [name, email, subject, message]
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        subject:
          type: string
        message:
          type: string
        tags:
          type: array
          items:
            type: string
        attachments:
          type: array
          maxItems: 5
          items:
            type: string
            format: binary
    PortalTicketSubmission:
      type: object
      properties:
        id:
          type: integer
        reference:
          type: string
        ticket_id:
          type: integer
        status:
          type: string
          enum: [accepted, pending, failed]
        channel:
          type: string
          enum: [portal, email, chat, api]
        submitted_at:
          type: string
          format: date-time
          nullable: true
        correlation_id:
          type: string
          nullable: true
        message:
          type: object
          properties:
            preview:
              type: string
              nullable: true
        links:
          type: object
          properties:
            confirmation:
              type: string
              format: uri
    TicketSubmission:
      type: object
      properties:
        id:
          type: integer
        subject:
          type: string
        message:
          type: string
        status:
          type: string
          enum: [accepted, pending, failed]
        channel:
          type: string
          enum: [portal, email, chat, api]
        tags:
          type: array
          maxItems: 5
          items:
            type: string
        submitted_at:
          type: string
          format: date-time
          nullable: true
        correlation_id:
          type: string
        ticket:
          type: object
          properties:
            id:
              type: integer
            status:
              type: string
              nullable: true
            priority:
              type: string
              nullable: true
            channel:
              type: string
              enum: [portal, email, chat, api]
              nullable: true
        contact:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            name:
              type: string
              nullable: true
            email:
              type: string
              format: email
              nullable: true
        attachments:
          type: object
          properties:
            count:
              type: integer
              nullable: true
        metadata:
          type: object
          nullable: true
          properties:
            ip_hash:
              type: string
            filename_digests:
              type: array
              items:
                type: string
    MeilisearchHealthLog:
      type: object
      description: Structured JSON log emitted by the `meilisearch:health-check` scheduler/command.
      required: [correlation_id, duration_ms, host, http_status, status]
      properties:
        correlation_id:
          type: string
          format: uuid
          description: Prefixed correlation identifier used to trace related logs.
        duration_ms:
          type: integer
          minimum: 0
          description: Total request duration in milliseconds.
        host:
          type: string
          format: uri
          description: Base Meilisearch host that was probed.
        http_status:
          type: integer
          minimum: 100
          maximum: 599
          description: HTTP status returned by the health endpoint.
        status:
          type: string
          description: Health status reported by Meilisearch (`available`, `ready`, `maintenance`).
        timestamp:
          type: string
          format: date-time
          description: Timestamp captured by the logging pipeline.
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          required: [code, message]
          properties:
            code:
              type: string
              example: ERR_VALIDATION
            message:
              type: string
    TicketRelationshipCreateRequest:
      type: object
      required: [primary_ticket_id, related_ticket_id, relationship_type]
      properties:
        primary_ticket_id:
          type: integer
          minimum: 1
        related_ticket_id:
          type: integer
          minimum: 1
        relationship_type:
          type: string
          enum: [merge, split, duplicate]
        context:
          type: object
          additionalProperties:
            type: string
        correlation_id:
          type: string
          maxLength: 64
    TicketRelationshipUpdateRequest:
      type: object
      properties:
        relationship_type:
          type: string
          enum: [merge, split, duplicate]
        context:
          type: object
          additionalProperties:
            type: string
        correlation_id:
          type: string
          maxLength: 64
