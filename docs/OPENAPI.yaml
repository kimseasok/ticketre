openapi: 3.1.0
description: Ticketre Service Desk API
info:
  title: Ticketre Service Desk API
  version: "1.0.0"
servers:
  - url: https://{host}
    variables:
      host:
        default: localhost
paths:
  /api/v1/health:
    get:
      summary: Application healthcheck
      tags: [System]
      responses:
        '200':
          description: Successful health response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  db:
                    type: string
                    example: ok
                  redis:
                    type: string
                    example: skipped
        '503':
          description: Dependency failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/tickets/{ticket}/messages:
    get:
      summary: List ticket messages
      tags: [Ticket Messages]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: ticket
          in: path
          required: true
          schema:
            type: integer
        - name: visibility
          in: query
          description: Optional visibility filter (agents only).
          schema:
            type: string
            enum: [public, internal]
      responses:
        '200':
          description: Collection of messages
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create ticket message
      tags: [Ticket Messages]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: ticket
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [body, visibility]
              properties:
                body:
                  type: string
                  description: Message content.
                visibility:
                  type: string
                  enum: [public, internal]
                sent_at:
                  type: string
                  format: date-time
      responses:
        '201':
          description: Message created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Message'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/tickets/{ticket}/messages/{message}:
    get:
      summary: Retrieve a single ticket message
      tags: [Ticket Messages]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketId'
        - $ref: '#/components/parameters/MessageId'
      responses:
        '200':
          description: Message detail
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Message'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update ticket message
      tags: [Ticket Messages]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketId'
        - $ref: '#/components/parameters/MessageId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                visibility:
                  type: string
                  enum: [public, internal]
                sent_at:
                  type: string
                  format: date-time
      responses:
        '200':
          description: Updated message
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Message'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete ticket message
      tags: [Ticket Messages]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketId'
        - $ref: '#/components/parameters/MessageId'
      responses:
        '204':
          description: Message deleted
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/tickets:
    get:
      summary: List tickets
      tags: [Tickets]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      responses:
        '200':
          description: Collection of tickets
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Ticket'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create ticket
      tags: [Tickets]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [subject, status, priority]
              properties:
                subject:
                  type: string
                status:
                  type: string
                  enum: [open, pending, closed]
                priority:
                  type: string
                  enum: [low, medium, high]
                assignee_id:
                  type: integer
                  nullable: true
                contact_id:
                  type: integer
                  nullable: true
                company_id:
                  type: integer
                  nullable: true
                metadata:
                  type: object
      responses:
        '201':
          description: Ticket created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Ticket'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/tickets/{ticket}:
    get:
      summary: Retrieve ticket
      tags: [Tickets]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketId'
      responses:
        '200':
          description: Ticket detail
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Ticket'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update ticket
      tags: [Tickets]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                subject:
                  type: string
                status:
                  type: string
                  enum: [open, pending, closed]
                priority:
                  type: string
                  enum: [low, medium, high]
                assignee_id:
                  type: integer
                  nullable: true
                metadata:
                  type: object
      responses:
        '200':
          description: Ticket updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Ticket'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/tickets/{ticket}/events:
    get:
      summary: List ticket lifecycle events
      tags: [Ticket Events]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketId'
      responses:
        '200':
          description: Collection of lifecycle events
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TicketEvent'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/audit-logs:
    get:
      summary: List audit logs
      tags: [Audit Logs]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: action
          in: query
          description: Filter by audit action code.
          schema:
            type: string
        - name: auditable_type
          in: query
          description: Filter by audited model type.
          schema:
            type: string
            enum: [ticket, contact, message, kb_article, kb_category]
        - name: auditable_id
          in: query
          description: Restrict results to a specific audited record id.
          schema:
            type: integer
        - name: user_id
          in: query
          description: Filter by actor id.
          schema:
            type: integer
        - name: from
          in: query
          description: Return entries created on or after this ISO 8601 date.
          schema:
            type: string
            format: date
        - name: to
          in: query
          description: Return entries created on or before this ISO 8601 date.
          schema:
            type: string
            format: date
        - name: per_page
          in: query
          description: Results per page (default 15, max 100).
          schema:
            type: integer
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: Paginated audit log collection
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuditLog'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/contact-anonymization-requests:
    get:
      summary: List contact anonymization requests
      tags: [Compliance]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, processing, completed, failed]
        - name: contact_id
          in: query
          schema:
            type: integer
        - name: brand_id
          in: query
          schema:
            type: integer
        - name: per_page
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: Paginated anonymization requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ContactAnonymizationRequest'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Queue contact anonymization
      tags: [Compliance]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [contact_id, reason]
              properties:
                contact_id:
                  type: integer
                reason:
                  type: string
                  maxLength: 500
                correlation_id:
                  type: string
                  maxLength: 64
                  nullable: true
      responses:
        '201':
          description: Anonymization request created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ContactAnonymizationRequest'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/contact-anonymization-requests/{request}:
    get:
      summary: Show contact anonymization request
      tags: [Compliance]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/ContactAnonymizationRequestId'
      responses:
        '200':
          description: Request detail
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ContactAnonymizationRequest'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/ticket-deletion-requests:
    get:
      summary: List ticket deletion requests
      tags: [Compliance]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, approved, processing, completed, failed, cancelled]
        - name: ticket_id
          in: query
          schema:
            type: integer
        - name: brand_id
          in: query
          schema:
            type: integer
        - name: per_page
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: Paginated deletion requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TicketDeletionRequest'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Register ticket deletion request
      tags: [Compliance]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ticket_id, reason]
              properties:
                ticket_id:
                  type: integer
                reason:
                  type: string
                  maxLength: 500
                correlation_id:
                  type: string
                  maxLength: 64
                  nullable: true
      responses:
        '201':
          description: Deletion request created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TicketDeletionRequest'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/ticket-deletion-requests/{ticketDeletionRequest}:
    get:
      summary: Show ticket deletion request
      tags: [Compliance]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketDeletionRequestId'
      responses:
        '200':
          description: Request detail
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TicketDeletionRequest'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/ticket-deletion-requests/{ticketDeletionRequest}/approve:
    post:
      summary: Approve ticket deletion request
      tags: [Compliance]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketDeletionRequestId'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                hold_hours:
                  type: integer
                  minimum: 0
                  maximum: 168
      responses:
        '200':
          description: Updated request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TicketDeletionRequest'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/ticket-deletion-requests/{ticketDeletionRequest}/cancel:
    post:
      summary: Cancel ticket deletion request
      tags: [Compliance]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketDeletionRequestId'
      responses:
        '200':
          description: Updated request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TicketDeletionRequest'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/roles:
    get:
      summary: List tenant roles
      tags: [Roles]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - name: search
          in: query
          description: Optional case-insensitive search across name and slug.
          schema:
            type: string
      responses:
        '200':
          description: Collection of roles
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create tenant role
      tags: [Roles]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, permissions]
              properties:
                name:
                  type: string
                slug:
                  type: string
                  nullable: true
                description:
                  type: string
                  nullable: true
                permissions:
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: Role created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Role'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/roles/{role}:
    get:
      summary: Retrieve role detail
      tags: [Roles]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/RoleId'
      responses:
        '200':
          description: Role detail
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Role'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update tenant role
      tags: [Roles]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/RoleId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                slug:
                  type: string
                  nullable: true
                description:
                  type: string
                  nullable: true
                permissions:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Role updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Role'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete tenant role
      tags: [Roles]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/RoleId'
      responses:
        '204':
          description: Role deleted
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Protected role error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/permissions:
    get:
      summary: List permissions
      tags: [Permissions]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - name: search
          in: query
          description: Optional case-insensitive search across name and slug.
          schema:
            type: string
        - name: system_only
          in: query
          description: Filter to only system permissions when true.
          schema:
            type: boolean
      responses:
        '200':
          description: Collection of permissions
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Permission'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create tenant permission
      tags: [Permissions]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                slug:
                  type: string
                  nullable: true
                description:
                  type: string
                  nullable: true
                guard_name:
                  type: string
                  default: web
                is_system:
                  type: boolean
      responses:
        '201':
          description: Permission created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Permission'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/permissions/{permission}:
    get:
      summary: Retrieve permission detail
      tags: [Permissions]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/PermissionId'
      responses:
        '200':
          description: Permission detail
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Permission'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update tenant permission
      tags: [Permissions]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/PermissionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                slug:
                  type: string
                  nullable: true
                description:
                  type: string
                  nullable: true
                guard_name:
                  type: string
                is_system:
                  type: boolean
      responses:
        '200':
          description: Permission updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Permission'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation or immutability error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete tenant permission
      tags: [Permissions]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/PermissionId'
      responses:
        '204':
          description: Permission deleted
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Immutability violation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/contacts:
    get:
      summary: List contacts
      tags: [Contacts]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - name: search
          in: query
          required: false
          description: Optional search string applied to name, email, and phone.
          schema:
            type: string
        - name: company_id
          in: query
          required: false
          schema:
            type: integer
        - name: gdpr_consent
          in: query
          required: false
          schema:
            type: boolean
        - name: tag_ids
          in: query
          required: false
          description: Comma separated list of tag identifiers.
          schema:
            type: string
      responses:
        '200':
          description: Collection of contacts
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Contact'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create contact
      tags: [Contacts]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactCreateRequest'
      responses:
        '201':
          description: Contact created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Contact'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/contacts/{contact}:
    get:
      summary: Retrieve contact
      tags: [Contacts]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/ContactId'
      responses:
        '200':
          description: Contact detail
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Contact'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update contact
      tags: [Contacts]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/ContactId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactUpdateRequest'
      responses:
        '200':
          description: Updated contact
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Contact'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete contact
      tags: [Contacts]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/ContactId'
      responses:
        '204':
          description: Contact deleted
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/companies:
    get:
      summary: List companies
      tags: [Companies]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - name: search
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Collection of companies
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Company'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create company
      tags: [Companies]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyCreateRequest'
      responses:
        '201':
          description: Company created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Company'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/companies/{company}:
    get:
      summary: Retrieve company
      tags: [Companies]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/CompanyId'
      responses:
        '200':
          description: Company detail
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Company'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update company
      tags: [Companies]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/CompanyId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyUpdateRequest'
      responses:
        '200':
          description: Updated company
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Company'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete company
      tags: [Companies]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/CompanyId'
      responses:
        '204':
          description: Company deleted
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/teams:
    get:
      summary: List tenant teams
      tags: [Teams]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: search
          in: query
          description: Optional search across team name and slug.
          schema:
            type: string
        - name: brand_id
          in: query
          description: Filter by brand identifier within the tenant.
          schema:
            type: integer
      responses:
        '200':
          description: Collection of teams
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Team'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create tenant team
      tags: [Teams]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                brand_id:
                  type: integer
                  nullable: true
                default_queue:
                  type: string
                  nullable: true
                description:
                  type: string
                  nullable: true
                members:
                  type: array
                  items:
                    type: object
                    required: [user_id, role]
                    properties:
                      user_id:
                        type: integer
                      role:
                        type: string
                      is_primary:
                        type: boolean
      responses:
        '201':
          description: Team created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Team'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/teams/{team}:
    get:
      summary: Retrieve team detail
      tags: [Teams]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: team
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Team detail
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Team'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update tenant team
      tags: [Teams]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: team
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                brand_id:
                  type: integer
                  nullable: true
                default_queue:
                  type: string
                  nullable: true
                description:
                  type: string
                  nullable: true
                members:
                  type: array
                  items:
                    type: object
                    required: [user_id, role]
                    properties:
                      user_id:
                        type: integer
                      role:
                        type: string
                      is_primary:
                        type: boolean
      responses:
        '200':
          description: Team updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Team'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete tenant team
      tags: [Teams]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: team
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Team deleted
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/kb-categories:
    get:
      summary: List knowledge base categories
      tags: [Knowledge Base]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      responses:
        '200':
          description: Collection of categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/KbCategory'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create knowledge base category
      tags: [Knowledge Base]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [brand_id, name, slug]
              properties:
                brand_id:
                  type: integer
                name:
                  type: string
                slug:
                  type: string
                parent_id:
                  type: integer
                  nullable: true
                order:
                  type: integer
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/KbCategory'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/kb-categories/{category}:
    get:
      summary: Retrieve knowledge base category
      tags: [Knowledge Base]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/KbCategoryId'
      responses:
        '200':
          description: Category detail
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/KbCategory'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update knowledge base category
      tags: [Knowledge Base]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/KbCategoryId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                brand_id:
                  type: integer
                name:
                  type: string
                slug:
                  type: string
                parent_id:
                  type: integer
                  nullable: true
                order:
                  type: integer
      responses:
        '200':
          description: Updated category
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/KbCategory'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete knowledge base category
      tags: [Knowledge Base]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/KbCategoryId'
      responses:
        '204':
          description: Category deleted
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/kb-articles/search:
    get:
      summary: Search knowledge base articles
      tags: [Knowledge Base]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: q
          in: query
          required: true
          schema:
            type: string
            minLength: 2
            maxLength: 255
        - name: locale
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, published, archived]
        - name: category_id
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/KbArticleSearchResult'
                  meta:
                    type: object
                    properties:
                      correlation_id:
                        type: string
                        description: Correlation identifier echoed from the request header or generated server-side.
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/kb-articles:
    get:
      summary: List knowledge base articles
      tags: [Knowledge Base]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, published, archived]
        - name: locale
          in: query
          schema:
            type: string
        - name: category_id
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Collection of articles
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/KbArticle'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create knowledge base article
      tags: [Knowledge Base]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KbArticleCreateRequest'
      responses:
        '201':
          description: Article created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/KbArticle'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/kb-articles/{article}:
    get:
      summary: Retrieve knowledge base article
      tags: [Knowledge Base]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/KbArticleId'
      responses:
        '200':
          description: Article detail
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/KbArticle'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update knowledge base article
      tags: [Knowledge Base]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/KbArticleId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KbArticleUpdateRequest'
      responses:
        '200':
          description: Updated article
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/KbArticle'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete knowledge base article
      tags: [Knowledge Base]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/KbArticleId'
      responses:
        '204':
          description: Article deleted
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/portal/tickets:
    post:
      summary: Submit ticket via customer portal
      tags: [Portal Tickets]
      security: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortalTicketSubmissionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PortalTicketSubmissionUploadRequest'
      responses:
        '201':
          description: Ticket submission accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PortalTicketSubmission'
        '404':
          description: Tenant not resolved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/ticket-submissions:
    get:
      summary: List ticket submissions
      tags: [Ticket Submissions]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: channel
          in: query
          schema:
            type: string
            enum: [portal, email, chat, api]
        - name: status
          in: query
          schema:
            type: string
            enum: [accepted, pending, failed]
        - name: search
          in: query
          schema:
            type: string
            maxLength: 255
      responses:
        '200':
          description: Submission list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TicketSubmission'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/ticket-submissions/{ticketSubmission}:
    get:
      summary: View ticket submission detail
      tags: [Ticket Submissions]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - name: ticketSubmission
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Submission detail
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TicketSubmission'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: laravel_session
  parameters:
    TenantHeader:
      name: X-Tenant
      in: header
      required: true
      schema:
        type: string
    BrandHeader:
      name: X-Brand
      in: header
      required: false
      schema:
        type: string
    TicketId:
      name: ticket
      in: path
      required: true
      schema:
        type: integer
    MessageId:
      name: message
      in: path
      required: true
      schema:
        type: integer
    KbCategoryId:
      name: category
      in: path
      required: true
      schema:
        type: integer
    KbArticleId:
      name: article
      in: path
      required: true
      schema:
        type: integer
    RoleId:
      name: role
      in: path
      required: true
      schema:
        type: integer
    PermissionId:
      name: permission
      in: path
      required: true
      schema:
        type: integer
    ContactId:
      name: contact
      in: path
      required: true
      schema:
        type: integer
    CompanyId:
      name: company
      in: path
      required: true
      schema:
        type: integer
    ContactAnonymizationRequestId:
      name: request
      in: path
      required: true
      schema:
        type: integer
    TicketDeletionRequestId:
      name: ticketDeletionRequest
      in: path
      required: true
      schema:
        type: integer
  schemas:
    Message:
      type: object
      properties:
        id:
          type: integer
        ticket_id:
          type: integer
        tenant_id:
          type: integer
        brand_id:
          type: integer
          nullable: true
        visibility:
          type: string
          enum: [public, internal]
        author_role:
          type: string
          enum: [agent, contact, system]
        body:
          type: string
        sent_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Ticket:
      type: object
      properties:
        id:
          type: integer
        tenant_id:
          type: integer
        brand_id:
          type: integer
          nullable: true
        subject:
          type: string
        status:
          type: string
        priority:
          type: string
        workflow_state:
          type: string
          nullable: true
        assignee:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            name:
              type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    TicketEvent:
      type: object
      properties:
        id:
          type: integer
        type:
          type: string
        visibility:
          type: string
        correlation_id:
          type: string
        payload:
          type: object
        broadcasted_at:
          type: string
          format: date-time
        ticket:
          $ref: '#/components/schemas/Ticket'
        initiator:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            name:
              type: string
        author:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            name:
              type: string
    Role:
      type: object
      properties:
        id:
          type: integer
        tenant_id:
          type: integer
        name:
          type: string
        slug:
          type: string
        description:
          type: string
          nullable: true
        is_system:
          type: boolean
        permissions:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
          nullable: true
        updated_at:
          type: string
          format: date-time
          nullable: true
    Permission:
      type: object
      properties:
        id:
          type: integer
        tenant_id:
          type: integer
          nullable: true
        name:
          type: string
        slug:
          type: string
        description:
          type: string
          nullable: true
        guard_name:
          type: string
        is_system:
          type: boolean
        created_at:
          type: string
          format: date-time
          nullable: true
        updated_at:
          type: string
          format: date-time
          nullable: true
    Team:
      type: object
      properties:
        id:
          type: integer
        tenant_id:
          type: integer
        brand_id:
          type: integer
          nullable: true
        name:
          type: string
        slug:
          type: string
        default_queue:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        members:
          type: array
          items:
            $ref: '#/components/schemas/TeamMember'
        created_at:
          type: string
          format: date-time
          nullable: true
        updated_at:
          type: string
          format: date-time
          nullable: true
    TeamMember:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        role:
          type: string
        is_primary:
          type: boolean
        user:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            name:
              type: string
    KbCategory:
      type: object
      properties:
        id:
          type: integer
        tenant_id:
          type: integer
        brand_id:
          type: integer
        name:
          type: string
        slug:
          type: string
        order:
          type: integer
        depth:
          type: integer
        path:
          type: string
          nullable: true
        parent_id:
          type: integer
          nullable: true
        parent:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            name:
              type: string
            slug:
              type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    KbArticle:
      type: object
      properties:
        id:
          type: integer
        tenant_id:
          type: integer
        brand_id:
          type: integer
        category_id:
          type: integer
        author_id:
          type: integer
          nullable: true
        slug:
          type: string
        default_locale:
          type: string
        locale:
          type: string
          description: The locale that was selected for this response (requested locale or default).
        title:
          type: string
        status:
          type: string
          enum: [draft, published, archived]
        content:
          type: string
        excerpt:
          type: string
          nullable: true
        metadata:
          type: object
          additionalProperties: true
          nullable: true
        published_at:
          type: string
          format: date-time
          nullable: true
        translations:
          type: array
          items:
            $ref: '#/components/schemas/KbArticleTranslation'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        category:
          $ref: '#/components/schemas/KbCategory'
        author:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            name:
              type: string
    KbArticleSearchResult:
      allOf:
        - $ref: '#/components/schemas/KbArticle'
        - type: object
          properties:
            score:
              type: number
              format: float
              nullable: true
            highlights:
              type: object
              nullable: true
              additionalProperties: true
              description: Highlight snippets provided by Meilisearch for matching fields.
    KbArticleTranslation:
      type: object
      properties:
        id:
          type: integer
          nullable: true
        locale:
          type: string
        title:
          type: string
        status:
          type: string
          enum: [draft, published, archived]
        content:
          type: string
        excerpt:
          type: string
          nullable: true
        metadata:
          type: object
          additionalProperties: true
          nullable: true
        published_at:
          type: string
          format: date-time
          nullable: true
    KbArticleTranslationInput:
      type: object
      required: [locale, title, status, content]
      properties:
        locale:
          type: string
        title:
          type: string
        status:
          type: string
          enum: [draft, published, archived]
        content:
          type: string
        excerpt:
          type: string
          nullable: true
        metadata:
          type: object
          additionalProperties: true
          nullable: true
        published_at:
          type: string
          format: date-time
          nullable: true
    KbArticleTranslationUpsert:
      allOf:
        - $ref: '#/components/schemas/KbArticleTranslationInput'
        - type: object
          properties:
            delete:
              type: boolean
              description: When true the specified locale will be soft deleted.
    KbArticleCreateRequest:
      type: object
      required: [brand_id, category_id, slug, translations]
      properties:
        brand_id:
          type: integer
        category_id:
          type: integer
        slug:
          type: string
        default_locale:
          type: string
          nullable: true
        author_id:
          type: integer
          nullable: true
        translations:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/KbArticleTranslationInput'
    KbArticleUpdateRequest:
      type: object
      properties:
        brand_id:
          type: integer
        category_id:
          type: integer
        slug:
          type: string
        default_locale:
          type: string
        author_id:
          type: integer
          nullable: true
        translations:
          type: array
          items:
            $ref: '#/components/schemas/KbArticleTranslationUpsert'
    AuditLog:
      type: object
      properties:
        id:
          type: integer
        tenant_id:
          type: integer
        brand_id:
          type: integer
          nullable: true
        action:
          type: string
        auditable_type:
          type: string
        auditable_id:
          type: integer
        changes:
          type: object
          additionalProperties: true
        actor:
          type: object
          nullable: true
          properties:
            id:
              type: integer
              nullable: true
            name:
              type: string
              nullable: true
        created_at:
          type: string
          format: date-time
    ContactAnonymizationRequest:
      type: object
      properties:
        id:
          type: integer
        tenant_id:
          type: integer
        brand_id:
          type: integer
          nullable: true
        contact_id:
          type: integer
        requested_by:
          type: integer
        status:
          type: string
          enum: [pending, processing, completed, failed]
        reason:
          type: string
        correlation_id:
          type: string
        pseudonym:
          type: string
          nullable: true
        processed_at:
          type: string
          format: date-time
          nullable: true
        failed_at:
          type: string
          format: date-time
          nullable: true
        failure_reason:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        contact:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            name:
              type: string
            email:
              type: string
              nullable: true
        requester:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            name:
              type: string
    TicketDeletionRequest:
      type: object
      properties:
        id:
          type: integer
        tenant_id:
          type: integer
        brand_id:
          type: integer
          nullable: true
        ticket_id:
          type: integer
        requested_by:
          type: integer
        approved_by:
          type: integer
          nullable: true
        cancelled_by:
          type: integer
          nullable: true
        status:
          type: string
          enum: [pending, approved, processing, completed, failed, cancelled]
        reason:
          type: string
        aggregate_snapshot:
          type: object
          nullable: true
          additionalProperties: true
        correlation_id:
          type: string
        approved_at:
          type: string
          format: date-time
          nullable: true
        hold_expires_at:
          type: string
          format: date-time
          nullable: true
        cancelled_at:
          type: string
          format: date-time
          nullable: true
        processed_at:
          type: string
          format: date-time
          nullable: true
        failed_at:
          type: string
          format: date-time
          nullable: true
        failure_reason:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        ticket:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            status:
              type: string
            priority:
              type: string
        requester:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            name:
              type: string
        approver:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            name:
              type: string
        canceller:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            name:
              type: string
    PortalTicketSubmissionRequest:
      type: object
      required: [name, email, subject, message]
      properties:
        name:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 255
        subject:
          type: string
          maxLength: 255
        message:
          type: string
          minLength: 10
        tags:
          type: array
          maxItems: 5
          items:
            type: string
            maxLength: 50
    PortalTicketSubmissionUploadRequest:
      type: object
      required: [name, email, subject, message]
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        subject:
          type: string
        message:
          type: string
        tags:
          type: array
          items:
            type: string
        attachments:
          type: array
          maxItems: 5
          items:
            type: string
            format: binary
    PortalTicketSubmission:
      type: object
      properties:
        id:
          type: integer
        reference:
          type: string
        ticket_id:
          type: integer
        status:
          type: string
          enum: [accepted, pending, failed]
        channel:
          type: string
          enum: [portal, email, chat, api]
        submitted_at:
          type: string
          format: date-time
          nullable: true
        correlation_id:
          type: string
          nullable: true
        message:
          type: object
          properties:
            preview:
              type: string
              nullable: true
        links:
          type: object
          properties:
            confirmation:
              type: string
              format: uri
    TicketSubmission:
      type: object
      properties:
        id:
          type: integer
        subject:
          type: string
        message:
          type: string
        status:
          type: string
          enum: [accepted, pending, failed]
        channel:
          type: string
          enum: [portal, email, chat, api]
        tags:
          type: array
          maxItems: 5
          items:
            type: string
        submitted_at:
          type: string
          format: date-time
          nullable: true
        correlation_id:
          type: string
        ticket:
          type: object
          properties:
            id:
              type: integer
            status:
              type: string
              nullable: true
            priority:
              type: string
              nullable: true
            channel:
              type: string
              enum: [portal, email, chat, api]
              nullable: true
        contact:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            name:
              type: string
              nullable: true
            email:
              type: string
              format: email
              nullable: true
        attachments:
          type: object
          properties:
            count:
              type: integer
              nullable: true
        metadata:
          type: object
          nullable: true
          properties:
            ip_hash:
              type: string
            filename_digests:
              type: array
              items:
                type: string
    ContactTag:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        slug:
          type: string
        color:
          type: string
          nullable: true
    Contact:
      type: object
      properties:
        id:
          type: integer
        tenant_id:
          type: integer
        company:
          $ref: '#/components/schemas/Company'
          nullable: true
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
          nullable: true
        metadata:
          type: object
          additionalProperties: true
        gdpr:
          type: object
          properties:
            consent:
              type: boolean
            consented_at:
              type: string
              format: date-time
              nullable: true
            consent_method:
              type: string
              nullable: true
            consent_source:
              type: string
              nullable: true
            notes_digest:
              type: string
              nullable: true
            notes_present:
              type: boolean
        tags:
          type: array
          items:
            $ref: '#/components/schemas/ContactTag'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    ContactCreateRequest:
      type: object
      required: [name, email, gdpr_consent]
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        company_id:
          type: integer
          nullable: true
        metadata:
          type: object
          additionalProperties: true
        gdpr_consent:
          type: boolean
        gdpr_consent_method:
          type: string
          description: Required when `gdpr_consent` is true.
        gdpr_consent_source:
          type: string
        gdpr_consented_at:
          type: string
          format: date-time
        gdpr_notes:
          type: string
        tags:
          type: array
          items:
            type: integer
    ContactUpdateRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        company_id:
          type: integer
        metadata:
          type: object
          additionalProperties: true
        gdpr_consent:
          type: boolean
        gdpr_consent_method:
          type: string
        gdpr_consent_source:
          type: string
        gdpr_consented_at:
          type: string
          format: date-time
        gdpr_notes:
          type: string
        tags:
          type: array
          items:
            type: integer
    Company:
      type: object
      properties:
        id:
          type: integer
        tenant_id:
          type: integer
        name:
          type: string
        domain:
          type: string
          nullable: true
        metadata:
          type: object
          additionalProperties: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    CompanyCreateRequest:
      type: object
      required: [name]
      properties:
        name:
          type: string
        domain:
          type: string
        metadata:
          type: object
          additionalProperties: true
    CompanyUpdateRequest:
      type: object
      properties:
        name:
          type: string
        domain:
          type: string
        metadata:
          type: object
          additionalProperties: true
    MeilisearchHealthLog:
      type: object
      description: Structured JSON log emitted by the `meilisearch:health-check` scheduler/command.
      required: [correlation_id, duration_ms, host, http_status, status]
      properties:
        correlation_id:
          type: string
          format: uuid
          description: Prefixed correlation identifier used to trace related logs.
        duration_ms:
          type: integer
          minimum: 0
          description: Total request duration in milliseconds.
        host:
          type: string
          format: uri
          description: Base Meilisearch host that was probed.
        http_status:
          type: integer
          minimum: 100
          maximum: 599
          description: HTTP status returned by the health endpoint.
        status:
          type: string
          description: Health status reported by Meilisearch (`available`, `ready`, `maintenance`).
        timestamp:
          type: string
          format: date-time
          description: Timestamp captured by the logging pipeline.
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          required: [code, message]
          properties:
            code:
              type: string
              example: ERR_VALIDATION
            message:
              type: string
